# Jubatus: Online machine learning framework for distributed environment
# Copyright (C) 2011,2012 Preferred Infrastructure and Nippon Telegraph and Telephone Corporation.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

message node {
  0: map<string, string>  property
  1: list<ulong>  in_edges
  2: list<ulong>  out_edges
}

# query: { key => value }
# matches if all keys exist on the property and all value are equal
# or, empty list matches all node/edge with any property
message preset_query {
  0: list<tuple<string, string> > edge_query
  1: list<tuple<string, string> > node_query
}

message edge {
  0: map<string, string> property
  1: string source
  2: string target
}

message shortest_path_query {
  0: string source
  1: string target
  2: uint max_hop
  3: preset_query query
}

service graph {

  #@random #@analysis #@pass
  string get_config(0: string name)

  #@random #@nolock #@pass
  string create_node(0: string name) # //@cht

  #@cht(2) #@update #@pass
  bool remove_node(0: string name, 1: string node_id) # //@cht

  #@cht #@update #@all_and
  bool update_node(0: string name, 1: string node_id, 2: map<string, string> property) # //@cht

  #@cht(1) #@nolock #@pass
  ulong create_edge(0: string name, 1: string node_id, 2: edge e) # //@cht

  #@cht #@update #@all_and
  bool update_edge(0: string name, 1: string node_id, 2: ulong edge_id, 3: edge e) # //@cht

  #@cht #@update #@all_and
  bool remove_edge(0: string name, 1: string node_id, 2: ulong edge_id) # //@cht

  #@random #@analysis #@pass
  double get_centrality(0: string name, 1: string node_id,
                        2: int centrality_type, 3: preset_query query) # //@random

  #@broadcast #@update #@all_and
  bool add_centrality_query(0: string name, 1: preset_query query)
  #@broadcast #@update #@all_and
  bool add_shortest_path_query(0: string name, 1: preset_query query)
  #@broadcast #@update #@all_and
  bool remove_centrality_query(0: string name, 1: preset_query query)
  #@broadcast #@update #@all_and
  bool remove_shortest_path_query(0: string name, 1: preset_query query)

  #@random #@analysis #@pass
  list<string> get_shortest_path(0: string name, 1: shortest_path_query query) # //@random

  #@broadcast #@update #@all_and
  bool update_index(0: string name) # //@broadcast

  #@broadcast #@update #@all_and
  bool clear(0: string name) # //@broadcast

  #@cht #@analysis #@pass
  node get_node(0: string name, 1: string node_id) # //@cht

  #@cht #@analysis #@pass
  edge get_edge(0: string name, 1: string node_id, 2: ulong edge_id) # //@cht

  #@broadcast #@update #@all_and
  bool save(0: string name, 1: string id)

  #@broadcast #@update #@all_and
  bool load(0: string name, 1: string id)

  #@broadcast #@analysis #@merge
  map<string, map<string, string> >  get_status(0: string name)

  #@internal #@update #@pass
  bool create_node_here(0: string name, 1: string node_id)
  #@internal #@update #@pass
  bool remove_global_node(0: string name, 1: string node_id)

  #@internal #@update #@pass
  bool create_edge_here(0: string name, 1: ulong edge_id, 2: edge e)
}
