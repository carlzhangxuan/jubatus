# Jubatus: Online machine learning framework for distributed environment
# Copyright (C) 2011,2012 Preferred Infrastructure and Nippon Telegraph and Telephone Corporation.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

message datum {
  0: list<tuple<string, string> >  string_values
  1: list<tuple<string, double> >  num_values
}

message estimate_result {
  0: string label
  1: double score
}

service classifier {

  #@random #@analysis #@pass
  string get_config(0: string name) # //@random

  #- - Parameters:
  #- 
  #-  - ``name`` : a string value to uniquely identifies a task in zookeeper quorum
  #-  - ``data`` : list of tuple of label and datum
  #- 
  #- - Returns:
  #- 
  #-  - Zero if this function updates models successfully.
  #- 
  #- Training model at a server chosen randomly. ``tuple<string, datum>`` is a tuple of datum and it's label. 
  #- This function is designed to allow bulk update with list of tuple of label and datum.
  #@random #@update #@pass
  int train(0: string name, 1: list<tuple<string, datum> > data) # //@random

  #- - Parameters:
  #- 
  #-  - ``name`` : a string value to uniquely identifies a task in zookeeper quorum
  #-  - ``data`` : list of datum for classify
  #- 
  #- - Returns:
  #- 
  #-  - List of estimate_results
  #- 
  #- Estimating a result at a server choosen randomly. ``estimate_results`` is a list of tuple of label and it's reliablity value.
  #@random #@analysis #@pass
  list<list<estimate_result> >  classify(0: string name, 1: list<datum> data) # //@random

  #@broadcast #@update #@all_and
  bool clear(0: string name) # //@broadcast

  #@broadcast #@update #@all_and
  bool save(0: string name, 1: string id) # //@broadcast

  #@broadcast #@update #@all_and
  bool load(0: string name, 1: string id) # //@broadcast

  #@broadcast #@analysis #@merge
  map<string, map<string, string> >  get_status(0: string name) # //@broadcast
}
